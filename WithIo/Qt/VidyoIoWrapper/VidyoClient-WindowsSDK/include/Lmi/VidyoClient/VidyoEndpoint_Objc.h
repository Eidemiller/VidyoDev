//
//	VidyoEndpoint_Objc.h
//	VidyoClient
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

#import "VidyoChatMessage_Objc.h"
#import "VidyoContactInfo_Objc.h"
#import "VidyoContact_Objc.h"
#import "VidyoDevice_Objc.h"
#import "VidyoLocalCamera_Objc.h"
#import "VidyoLocalMicrophone_Objc.h"
#import "VidyoLocalMonitor_Objc.h"
#import "VidyoLocalRenderer_Objc.h"
#import "VidyoLocalSpeaker_Objc.h"
#import "VidyoLocalWindowShare_Objc.h"
#import "VidyoLogRecord_Objc.h"
#import "VidyoNetworkInterface_Objc.h"
#import "VidyoParticipant_Objc.h"
#import "VidyoRemoteCamera_Objc.h"
#import "VidyoRemoteMicrophone_Objc.h"
#import "VidyoRemoteRenderer_Objc.h"
#import "VidyoRemoteSpeaker_Objc.h"
#import "VidyoRemoteWindowShare_Objc.h"
#import "VidyoRoomProperties_Objc.h"
#import "VidyoStatistics_Objc.h"
@class Call;
@class Endpoint;
@class Room;
@class RoomInfo;
@class User;
typedef NS_ENUM(NSInteger, CallEndReason){
	CALLENDREASON_ConnectionFailed,
	CALLENDREASON_ConnectionLost,
	CALLENDREASON_Ended,
	CALLENDREASON_MiscError,
	CALLENDREASON_ParticipantBusy,
	CALLENDREASON_ParticipantEnded,
	CALLENDREASON_ParticipantRejected
};
typedef NS_ENUM(NSInteger, CallInitiatedResult){
	CALLINITIATEDRESULT_Cancelled,
	CALLINITIATEDRESULT_MiscLocalError,
	CALLINITIATEDRESULT_MiscRemoteError,
	CALLINITIATEDRESULT_NoResponse,
	CALLINITIATEDRESULT_OK,
	CALLINITIATEDRESULT_UnknownParticipant
};
typedef NS_ENUM(NSInteger, EndpointLogCompressionResult){
	ENDPOINTLOGCOMPRESSIONRESULT_MiscError,
	ENDPOINTLOGCOMPRESSIONRESULT_Success
};
typedef NS_ENUM(NSInteger, EndpointMediaState){
	ENDPOINTMEDIASTATE_GreenRoom,
	ENDPOINTMEDIASTATE_Idle,
	ENDPOINTMEDIASTATE_Live
};
typedef NS_ENUM(NSInteger, EndpointMode){
	ENDPOINTMODE_Background,
	ENDPOINTMODE_Default,
	ENDPOINTMODE_Foreground
};
typedef NS_ENUM(NSInteger, EndpointTone){
	ENDPOINTTONE_Join,
	ENDPOINTTONE_Leave,
	ENDPOINTTONE_Max,
	ENDPOINTTONE_MsgRecv,
	ENDPOINTTONE_MsgSend,
	ENDPOINTTONE_Ring
};
typedef NS_ENUM(NSInteger, RoomDeleteResult){
	ROOMDELETERESULT_MiscError,
	ROOMDELETERESULT_NoResponse,
	ROOMDELETERESULT_OK,
	ROOMDELETERESULT_OutOfResources,
	ROOMDELETERESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, RoomEnterResult){
	ROOMENTERRESULT_Banned,
	ROOMENTERRESULT_Cancelled,
	ROOMENTERRESULT_InvalidPassword,
	ROOMENTERRESULT_MiscLocalError,
	ROOMENTERRESULT_MiscRemoteError,
	ROOMENTERRESULT_NoResponse,
	ROOMENTERRESULT_NotMember,
	ROOMENTERRESULT_OK,
	ROOMENTERRESULT_RoomFull,
	ROOMENTERRESULT_UnknownRoom
};
typedef NS_ENUM(NSInteger, RoomExitReason){
	ROOMEXITREASON_Booted,
	ROOMEXITREASON_ConnectionLost,
	ROOMEXITREASON_Left,
	ROOMEXITREASON_MembershipConnectionLost,
	ROOMEXITREASON_MiscLocalError,
	ROOMEXITREASON_MiscRemoteError,
	ROOMEXITREASON_NoResponse,
	ROOMEXITREASON_ProtocolViolation,
	ROOMEXITREASON_SessionConnectionLost,
	ROOMEXITREASON_ShuttingDown
};
typedef NS_ENUM(NSInteger, RoomGetPropertiesResult){
	ROOMGETPROPERTIESRESULT_MiscLocalError,
	ROOMGETPROPERTIESRESULT_MiscRemoteError,
	ROOMGETPROPERTIESRESULT_NoResponse,
	ROOMGETPROPERTIESRESULT_OK,
	ROOMGETPROPERTIESRESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, RoomMediaDisableReason){
	ROOMMEDIADISABLEREASON_Booted,
	ROOMMEDIADISABLEREASON_ConferenceDestroyed,
	ROOMMEDIADISABLEREASON_Disabled,
	ROOMMEDIADISABLEREASON_MediaConnectionLost,
	ROOMMEDIADISABLEREASON_MiscLocalError,
	ROOMMEDIADISABLEREASON_MiscRemoteError,
	ROOMMEDIADISABLEREASON_ServerShuttingDown,
	ROOMMEDIADISABLEREASON_SessionTerminated,
	ROOMMEDIADISABLEREASON_SignalingConnectionLost
};
typedef NS_ENUM(NSInteger, RoomMediaFailReason){
	ROOMMEDIAFAILREASON_Cancelled,
	ROOMMEDIAFAILREASON_MediaConnectionLost,
	ROOMMEDIAFAILREASON_MiscLocalError,
	ROOMMEDIAFAILREASON_MiscRemoteError,
	ROOMMEDIAFAILREASON_NoConference,
	ROOMMEDIAFAILREASON_SignalingConnectionLost
};
typedef NS_ENUM(NSInteger, RoomProfileControlMode){
	ROOMPROFILECONTROLMODE_AlwaysOff,
	ROOMPROFILECONTROLMODE_AlwaysOn,
	ROOMPROFILECONTROLMODE_Default
};
typedef NS_ENUM(NSInteger, RoomSearchResult){
	ROOMSEARCHRESULT_MiscLocalError,
	ROOMSEARCHRESULT_MiscRemoteError,
	ROOMSEARCHRESULT_NoRecords,
	ROOMSEARCHRESULT_NoResponse,
	ROOMSEARCHRESULT_OK,
	ROOMSEARCHRESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, RoomSetFavoriteResult){
	ROOMSETFAVORITERESULT_Conflict,
	ROOMSETFAVORITERESULT_MiscLocalError,
	ROOMSETFAVORITERESULT_MiscRemoteError,
	ROOMSETFAVORITERESULT_NoResponse,
	ROOMSETFAVORITERESULT_NotAcceptable,
	ROOMSETFAVORITERESULT_NotAllowed,
	ROOMSETFAVORITERESULT_OK,
	ROOMSETFAVORITERESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, RoomSetPropertiesResult){
	ROOMSETPROPERTIESRESULT_Conflict,
	ROOMSETPROPERTIESRESULT_MiscLocalError,
	ROOMSETPROPERTIESRESULT_MiscRemoteError,
	ROOMSETPROPERTIESRESULT_NoResponse,
	ROOMSETPROPERTIESRESULT_NotAcceptable,
	ROOMSETPROPERTIESRESULT_NotAllowed,
	ROOMSETPROPERTIESRESULT_OK,
	ROOMSETPROPERTIESRESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, RoomState){
	ROOMSTATE_Created,
	ROOMSTATE_Creating,
	ROOMSTATE_Entered,
	ROOMSTATE_Entering,
	ROOMSTATE_Exited,
	ROOMSTATE_Exiting,
	ROOMSTATE_MediaDisabled,
	ROOMSTATE_MediaDisabling,
	ROOMSTATE_MediaEnabled,
	ROOMSTATE_MediaEnabling,
	ROOMSTATE_MediaRouteAcquired,
	ROOMSTATE_MediaRouteAcquiring
};
typedef NS_ENUM(NSInteger, RoomType){
	ROOMTYPE_Conversation,
	ROOMTYPE_Scheduled,
	ROOMTYPE_Topic,
	ROOMTYPE_Unknown
};
typedef NS_ENUM(NSInteger, RoomSearchField){
	ROOMSEARCHFIELD_Admin,
	ROOMSEARCHFIELD_Member,
	ROOMSEARCHFIELD_Moderator,
	ROOMSEARCHFIELD_Name,
	ROOMSEARCHFIELD_NonMembers,
	ROOMSEARCHFIELD_Owner,
	ROOMSEARCHFIELD_Public,
	ROOMSEARCHFIELD_Subject,
	ROOMSEARCHFIELD_Type,
	ROOMSEARCHFIELD_User
};
typedef NS_ENUM(NSInteger, RoomSearchFieldRelation){
	ROOMSEARCHFIELDRELATION_AND,
	ROOMSEARCHFIELDRELATION_OR
};
typedef NS_ENUM(NSInteger, UserCallCreateResult){
	USERCALLCREATERESULT_MiscLocalError,
	USERCALLCREATERESULT_MiscRemoteError,
	USERCALLCREATERESULT_NoResponse,
	USERCALLCREATERESULT_NotAllowed,
	USERCALLCREATERESULT_OK
};
typedef NS_ENUM(NSInteger, UserConnectionStatusChangedReason){
	USERCONNECTIONSTATUSCHANGEDREASON_ConnectionError,
	USERCONNECTIONSTATUSCHANGEDREASON_LostContactWithServer,
	USERCONNECTIONSTATUSCHANGEDREASON_MiscNetworkError,
	USERCONNECTIONSTATUSCHANGEDREASON_NetworkInterfaceChanged,
	USERCONNECTIONSTATUSCHANGEDREASON_NoCommunicationWithServer,
	USERCONNECTIONSTATUSCHANGEDREASON_NoValidNetworkInterfaces,
	USERCONNECTIONSTATUSCHANGEDREASON_OK
};
typedef NS_ENUM(NSInteger, UserGetContactResult){
	USERGETCONTACTRESULT_MiscLocalError,
	USERGETCONTACTRESULT_MiscRemoteError,
	USERGETCONTACTRESULT_NoResponse,
	USERGETCONTACTRESULT_OK,
	USERGETCONTACTRESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, UserLoginResult){
	USERLOGINRESULT_Cancelled,
	USERLOGINRESULT_ConnectionFailed,
	USERLOGINRESULT_ConnectionLost,
	USERLOGINRESULT_ConnectionTimeout,
	USERLOGINRESULT_InvalidPassword,
	USERLOGINRESULT_InvalidUser,
	USERLOGINRESULT_MiscAuthError,
	USERLOGINRESULT_MiscError,
	USERLOGINRESULT_NoResponse,
	USERLOGINRESULT_OK,
	USERLOGINRESULT_Terminated,
	USERLOGINRESULT_WebProxyAuthenticationRequired
};
typedef NS_ENUM(NSInteger, UserLogoutReason){
	USERLOGOUTREASON_ConnectionLost,
	USERLOGOUTREASON_ConnectionTimeout,
	USERLOGOUTREASON_LoggedOut,
	USERLOGOUTREASON_MiscError,
	USERLOGOUTREASON_NoResponse,
	USERLOGOUTREASON_Terminated
};
typedef NS_ENUM(NSInteger, UserRoomCreateResult){
	USERROOMCREATERESULT_DuplicateName,
	USERROOMCREATERESULT_MiscLocalError,
	USERROOMCREATERESULT_MiscRemoteError,
	USERROOMCREATERESULT_NoResponse,
	USERROOMCREATERESULT_NotFound,
	USERROOMCREATERESULT_OK,
	USERROOMCREATERESULT_Unauthorized
};
typedef NS_ENUM(NSInteger, UserSearchField){
	USERSEARCHFIELD_EMAIL,
	USERSEARCHFIELD_NAME,
	USERSEARCHFIELD_TELNO,
	USERSEARCHFIELD_UID
};
typedef NS_ENUM(NSInteger, UserSearchResult){
	USERSEARCHRESULT_MiscLocalError,
	USERSEARCHRESULT_MiscRemoteError,
	USERSEARCHRESULT_NoRecords,
	USERSEARCHRESULT_NoResponse,
	USERSEARCHRESULT_OK
};
typedef NS_ENUM(NSInteger, UserState){
	USERSTATE_Idle,
	USERSTATE_LoggedIn,
	USERSTATE_LoggingIn,
	USERSTATE_Reconnecting
};
typedef NS_ENUM(NSInteger, UserTokenType){
	USERTOKENTYPE_AccessToken,
	USERTOKENTYPE_RefreshToken
};
@interface VidyoClientEndpoint : NSObject
{}

	+(NSString*) GetBuildTag;
	+(NSString*) GetVersion;
	+(BOOL) Initialize;
	+(void) Uninitialize;
@end
@protocol IAccept

	-(void) OnInitiated:(CallInitiatedResult)result P:(Participant*)p;
	-(void) OnEnded:(Participant*)p Reason:(CallEndReason)reason;
@end
@protocol IRegisterMessageEventListener

	-(void) OnMessageReceived:(Participant*)participant ChatMessage:(ChatMessage*)chatMessage;
	-(void) OnMessageAcknowledged:(ChatMessage*)chatMessage;
	-(void) OnMessageRead:(Participant*)participant MessageId:(long long)messageId;
	-(void) OnMessageTypingIndication:(Participant*)participant TypingIndication:(ChatMessageTypingIndication)typingIndication;
@end
@protocol IRegisterSubjectEventListener

	-(void) OnSetSubject:(const char*)subject;
@end
@interface Call : NSObject
{
	void* objPtr;
	@public
	NSMutableString* id;
	id<IAccept> accept;
	id<IRegisterMessageEventListener> registerMessageEventListener;
	id<IRegisterSubjectEventListener> registerSubjectEventListener;
}

	-(void) dealloc;
	-(BOOL) Accept:(id<IAccept>)accept;
	-(NSString*) GetId;
	-(BOOL) GetParticipants:(NSMutableArray*)participants;
	-(BOOL) GetRemoteRenderers:(NSMutableArray*)renderers;
	-(BOOL) GetRemoteSpeakers:(NSMutableArray*)speakers;
	-(const char*) GetSubject;
	-(User*) GetUser;
	-(void) HangUp;
	-(BOOL) Initiate:(id<IAccept>)accept;
	-(BOOL) RegisterMessageEventListener:(id<IRegisterMessageEventListener>)registerMessageEventListener;
	-(BOOL) RegisterSubjectEventListener:(id<IRegisterSubjectEventListener>)registerSubjectEventListener;
	-(void) Reject;
	-(BOOL) SendMessage:(const char*)message;
	-(BOOL) SetSubject:(const char*)subject;
	-(id) initWithObject:(void*)rPtr;
	-(void*)GetObjectPtr;
@end
@protocol ICompressLogs

	-(void) OnLogCompressionComplete:(NSMutableString*)compressedFileName Result:(EndpointLogCompressionResult)result;
@end
@protocol IRegisterLocalCameraEventListener

	-(void) OnLocalCameraAdded:(LocalCamera*)localCamera;
	-(void) OnLocalCameraRemoved:(LocalCamera*)localCamera;
	-(void) OnLocalCameraSelected:(LocalCamera*)localCamera;
	-(void) OnLocalCameraStateUpdated:(LocalCamera*)localCamera State:(DeviceState)state;
@end
@protocol IRegisterLocalMicrophoneEventListener

	-(void) OnLocalMicrophoneAdded:(LocalMicrophone*)localMicrophone;
	-(void) OnLocalMicrophoneRemoved:(LocalMicrophone*)localMicrophone;
	-(void) OnLocalMicrophoneSelected:(LocalMicrophone*)localMicrophone;
	-(void) OnLocalMicrophoneStateUpdated:(LocalMicrophone*)localMicrophone State:(DeviceState)state;
@end
@protocol IRegisterLocalMonitorEventListener

	-(void) OnLocalMonitorAdded:(LocalMonitor*)localMonitor;
	-(void) OnLocalMonitorRemoved:(LocalMonitor*)localMonitor;
	-(void) OnLocalMonitorSelected:(LocalMonitor*)localMonitor;
	-(void) OnLocalMonitorStateUpdated:(LocalMonitor*)localMonitor State:(DeviceState)state;
@end
@protocol IRegisterLocalRendererEventListener

	-(void) OnLocalRendererAdded:(LocalRenderer*)localRenderer;
	-(void) OnLocalRendererRemoved:(LocalRenderer*)localRenderer;
	-(void) OnLocalRendererSelected:(LocalRenderer*)localRenderer;
	-(void) OnLocalRendererStateUpdated:(LocalRenderer*)localRenderer State:(DeviceState)state;
@end
@protocol IRegisterLocalSpeakerEventListener

	-(void) OnLocalSpeakerAdded:(LocalSpeaker*)localSpeaker;
	-(void) OnLocalSpeakerRemoved:(LocalSpeaker*)localSpeaker;
	-(void) OnLocalSpeakerSelected:(LocalSpeaker*)localSpeaker;
	-(void) OnLocalSpeakerStateUpdated:(LocalSpeaker*)localSpeaker State:(DeviceState)state;
@end
@protocol IRegisterLocalWindowShareEventListener

	-(void) OnLocalWindowShareAdded:(LocalWindowShare*)localWindowShare;
	-(void) OnLocalWindowShareRemoved:(LocalWindowShare*)localWindowShare;
	-(void) OnLocalWindowShareSelected:(LocalWindowShare*)localWindowShare;
	-(void) OnLocalWindowShareStateUpdated:(LocalWindowShare*)localWindowShare State:(DeviceState)state;
@end
@protocol IRegisterLogEventListener

	-(void) OnLog:(LogRecord*)logRecord;
@end
@protocol IRegisterNetworkInterfaceEventListener

	-(void) OnNetworkInterfaceAdded:(NetworkInterface*)networkInterface;
	-(void) OnNetworkInterfaceRemoved:(NetworkInterface*)networkInterface;
	-(void) OnNetworkInterfaceSelected:(NetworkInterface*)networkInterface TransportType:(NetworkInterfaceTransportType)transportType;
	-(void) OnNetworkInterfaceStateUpdated:(NetworkInterface*)networkInterface State:(NetworkInterfaceState)state;
@end
@protocol IRegisterRemoteCameraEventListener

	-(void) OnRemoteCameraAdded:(RemoteCamera*)remoteCamera User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteCameraRemoved:(RemoteCamera*)remoteCamera User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteCameraStateUpdated:(RemoteCamera*)remoteCamera User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant State:(DeviceState)state;
@end
@protocol IRegisterRemoteMicrophoneEventListener

	-(void) OnRemoteMicrophoneAdded:(RemoteMicrophone*)remoteMicrophone User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteMicrophoneRemoved:(RemoteMicrophone*)remoteMicrophone User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteMicrophoneStateUpdated:(RemoteMicrophone*)remoteMicrophone User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant State:(DeviceState)state;
@end
@protocol IRegisterRemoteRendererEventListener

	-(void) OnRemoteRendererAdded:(RemoteRenderer*)remoteRenderer User:(User*)user Call:(Call*)call Room:(Room*)room;
	-(void) OnRemoteRendererRemoved:(RemoteRenderer*)remoteRenderer User:(User*)user Call:(Call*)call Room:(Room*)room;
@end
@protocol IRegisterRemoteSpeakerEventListener

	-(void) OnRemoteSpeakerAdded:(RemoteSpeaker*)remoteSpeaker User:(User*)user Call:(Call*)call Room:(Room*)room;
	-(void) OnRemoteSpeakerRemoved:(RemoteSpeaker*)remoteSpeaker User:(User*)user Call:(Call*)call Room:(Room*)room;
@end
@protocol IRegisterRemoteWindowShareEventListener

	-(void) OnRemoteWindowShareAdded:(RemoteWindowShare*)remoteWindowShare User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteWindowShareRemoved:(RemoteWindowShare*)remoteWindowShare User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant;
	-(void) OnRemoteWindowShareStateUpdated:(RemoteWindowShare*)remoteWindowShare User:(User*)user Call:(Call*)call Room:(Room*)room Participant:(Participant*)participant State:(DeviceState)state;
@end
@interface Endpoint : NSObject
{
	void* objPtr;
	@public
	id<ICompressLogs> compressLogs;
	id<IRegisterLocalCameraEventListener> registerLocalCameraEventListener;
	id<IRegisterLocalMicrophoneEventListener> registerLocalMicrophoneEventListener;
	id<IRegisterLocalMonitorEventListener> registerLocalMonitorEventListener;
	id<IRegisterLocalRendererEventListener> registerLocalRendererEventListener;
	id<IRegisterLocalSpeakerEventListener> registerLocalSpeakerEventListener;
	id<IRegisterLocalWindowShareEventListener> registerLocalWindowShareEventListener;
	id<IRegisterLogEventListener> registerLogEventListener;
	id<IRegisterNetworkInterfaceEventListener> registerNetworkInterfaceEventListener;
	id<IRegisterRemoteCameraEventListener> registerRemoteCameraEventListener;
	id<IRegisterRemoteMicrophoneEventListener> registerRemoteMicrophoneEventListener;
	id<IRegisterRemoteRendererEventListener> registerRemoteRendererEventListener;
	id<IRegisterRemoteSpeakerEventListener> registerRemoteSpeakerEventListener;
	id<IRegisterRemoteWindowShareEventListener> registerRemoteWindowShareEventListener;
}

	-(id) init:(void*)viewId ViewStyle:(LocalRendererViewStyle)viewStyle RemoteParticipants:(unsigned int)remoteParticipants ConsoleLogFilter:(const char*)consoleLogFilter FileLogFilter:(const char*)fileLogFilter FileLogName:(const char*)fileLogName;
	-(void) dealloc;
	-(BOOL) AssignViewToLocalCamera:(void*)viewId LocalCamera:(LocalCamera*)localCamera DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) AssignViewToRemoteCamera:(void*)viewId Camera:(RemoteCamera*)camera DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) AssignViewToRemoteWindowShare:(void*)viewId RemoteWindowShare:(RemoteWindowShare*)remoteWindowShare DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) CompressLogs:(NSMutableString*)compressedFileName CompressLogs:(id<ICompressLogs>)compressLogs;
	-(BOOL) CreateRenderer:(LocalMonitor*)monitor Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) CreateRendererFromViewId:(void*)viewId X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) CycleCamera;
	-(BOOL) CycleMicrophone;
	-(BOOL) CycleSpeaker;
	-(void) Disable;
	-(void) DisableDebug;
	-(BOOL) EnableDebug:(unsigned int)port LogFilter:(const char*)logFilter;
	-(BOOL) EnableFileLogger:(const char*)fileLogName FileLogFilter:(const char*)fileLogFilter;
	-(BOOL) GenerateLicenseKey:(NSMutableString*)licenseKey;
	-(NSString*) GetApplicationTag;
	-(NSString*) GetId;
	-(EndpointStats*) GetStats;
	-(NSMutableString*) GetStatsJson;
	-(BOOL) HideView:(void*)viewId;
	-(BOOL) IsDebugEnabled;
	-(void) LocalCameraSelectAdvanced:(LocalCamera*)localCamera;
	-(void) LocalCameraUnselectAdvanced:(LocalCamera*)localCamera;
	-(void) LocalMicrophoneSelectAdvanced:(LocalMicrophone*)localMicrophone PreviewedPreCall:(BOOL)previewedPreCall;
	-(void) LocalMicrophoneUnselectAdvanced:(LocalMicrophone*)localMicrophone;
	-(void) LocalMonitorSelectAdvanced:(LocalMonitor*)localMonitor;
	-(void) LocalMonitorUnselectAdvanced:(LocalMonitor*)localMonitor;
	-(void) LocalRendererSelectAdvanced:(LocalRenderer*)localRenderer;
	-(void) LocalRendererUnselectAdvanced:(LocalRenderer*)localRenderer;
	-(void) LocalSpeakerSelectAdvanced:(LocalSpeaker*)localSpeaker;
	-(void) LocalSpeakerUnselectAdvanced:(LocalSpeaker*)localSpeaker;
	-(void) LocalWindowShareSelectAdvanced:(LocalWindowShare*)localWindowShare;
	-(void) LocalWindowShareUnselectAdvanced:(LocalWindowShare*)localWindowShare;
	-(BOOL) RegisterLocalCameraEventListener:(id<IRegisterLocalCameraEventListener>)registerLocalCameraEventListener;
	-(BOOL) RegisterLocalMicrophoneEventListener:(id<IRegisterLocalMicrophoneEventListener>)registerLocalMicrophoneEventListener;
	-(BOOL) RegisterLocalMonitorEventListener:(id<IRegisterLocalMonitorEventListener>)registerLocalMonitorEventListener;
	-(BOOL) RegisterLocalRendererEventListener:(id<IRegisterLocalRendererEventListener>)registerLocalRendererEventListener;
	-(BOOL) RegisterLocalSpeakerEventListener:(id<IRegisterLocalSpeakerEventListener>)registerLocalSpeakerEventListener;
	-(BOOL) RegisterLocalWindowShareEventListener:(id<IRegisterLocalWindowShareEventListener>)registerLocalWindowShareEventListener;
	-(BOOL) RegisterLogEventListener:(id<IRegisterLogEventListener>)registerLogEventListener Filter:(const char*)filter;
	-(BOOL) RegisterNetworkInterfaceEventListener:(id<IRegisterNetworkInterfaceEventListener>)registerNetworkInterfaceEventListener;
	-(BOOL) RegisterRemoteCameraEventListener:(id<IRegisterRemoteCameraEventListener>)registerRemoteCameraEventListener;
	-(BOOL) RegisterRemoteMicrophoneEventListener:(id<IRegisterRemoteMicrophoneEventListener>)registerRemoteMicrophoneEventListener;
	-(BOOL) RegisterRemoteRendererEventListener:(id<IRegisterRemoteRendererEventListener>)registerRemoteRendererEventListener;
	-(BOOL) RegisterRemoteSpeakerEventListener:(id<IRegisterRemoteSpeakerEventListener>)registerRemoteSpeakerEventListener;
	-(BOOL) RegisterRemoteWindowShareEventListener:(id<IRegisterRemoteWindowShareEventListener>)registerRemoteWindowShareEventListener;
	-(void) RemoveRenderer:(LocalRenderer*)localRenderer;
	-(BOOL) SelectDefaultCamera;
	-(BOOL) SelectDefaultMicrophone;
	-(BOOL) SelectDefaultNetworkInterfaceForMedia;
	-(BOOL) SelectDefaultNetworkInterfaceForSignaling;
	-(BOOL) SelectDefaultSpeaker;
	-(BOOL) SelectLocalCamera:(LocalCamera*)localCamera;
	-(BOOL) SelectLocalMicrophone:(LocalMicrophone*)localMicrophone;
	-(BOOL) SelectLocalMonitor:(LocalMonitor*)localMonitor;
	-(BOOL) SelectLocalSpeaker:(LocalSpeaker*)localSpeaker;
	-(BOOL) SelectLocalWindowShare:(LocalWindowShare*)localWindowShare;
	-(BOOL) SelectNetworkInterfaceForMedia:(NetworkInterface*)networkInterface;
	-(BOOL) SelectNetworkInterfaceForSignaling:(NetworkInterface*)networkInterface;
	-(BOOL) SetApplicationTag:(const char*)applicationTag;
	-(BOOL) SetCameraPrivacy:(BOOL)privacy;
	-(BOOL) SetConsoleLoggerFilter:(const char*)consoleLogFilter;
	-(BOOL) SetConsoleLoggerLevelAndCategory:(const char*)levelName CategoryName:(const char*)categoryName On:(BOOL)on;
	-(BOOL) SetDebugFilter:(const char*)debugLogFilter;
	-(BOOL) SetFileLoggerFilter:(const char*)fileLogFilter;
	-(BOOL) SetFileLoggerLevelAndCategory:(const char*)levelName CategoryName:(const char*)categoryName On:(BOOL)on;
	-(BOOL) SetLocation:(double)latitude Longitude:(double)longitude;
	-(BOOL) SetMicrophonePrivacy:(BOOL)privacy;
	-(BOOL) SetMode:(EndpointMode)mode;
	-(BOOL) SetPoolId:(NSString*)poolId;
	-(BOOL) SetPreview:(BOOL)preview;
	-(BOOL) SetSpeakerPrivacy:(BOOL)privacy;
	-(BOOL) SetViewAnimationSpeed:(void*)viewId SpeedPercentage:(unsigned int)speedPercentage;
	-(BOOL) SetViewBackgroundColor:(void*)viewId Red:(unsigned char)red Green:(unsigned char)green Blue:(unsigned char)blue;
	-(BOOL) ShowAudioMeters:(void*)viewId ShowMeters:(BOOL)showMeters;
	-(BOOL) ShowPreview:(BOOL)preview;
	-(BOOL) ShowViewAt:(void*)viewId X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) ShowViewLabel:(void*)viewId ShowLabel:(BOOL)showLabel;
	-(BOOL) StartDeviceDetection;
	-(BOOL) StartLocationDetection;
	-(BOOL) StartNetworkInterfaceDetection;
	-(BOOL) StartShareDetection;
	-(void) StopDeviceDetection;
	-(void) StopLocationDetection;
	-(void) StopNetworkInterfaceDetection;
	-(void) StopShareDetection;
	-(BOOL) UnregisterLocalCameraEventListener;
	-(BOOL) UnregisterLocalMicrophoneEventListener;
	-(BOOL) UnregisterLocalMonitorEventListener;
	-(BOOL) UnregisterLocalRendererEventListener;
	-(BOOL) UnregisterLocalSpeakerEventListener;
	-(BOOL) UnregisterLocalWindowShareEventListener;
	-(BOOL) UnregisterLogEventListener;
	-(BOOL) UnregisterNetworkInterfaceEventListener;
	-(BOOL) UnregisterRemoteCameraEventListener;
	-(BOOL) UnregisterRemoteMicrophoneEventListener;
	-(BOOL) UnregisterRemoteRendererEventListener;
	-(BOOL) UnregisterRemoteSpeakerEventListener;
	-(BOOL) UnregisterRemoteWindowShareEventListener;
	-(BOOL) ValidateLicenseKey:(NSString*)licenseKey IsValid:(BOOL*)isValid;
	-(id) initWithObject:(void*)rPtr;
	-(void*)GetObjectPtr;
@end
@protocol IAcceptIncoming

	-(void) OnEntered:(RoomEnterResult)result;
	-(void) OnExited:(RoomExitReason)reason;
@end
@protocol IAcquireMediaRoute

	-(void) OnMediaRouteAcquired;
@end
@protocol IDelete

	-(void) OnDeleteResult:(RoomDeleteResult)result;
@end
@protocol IEnableMedia

	-(void) OnMediaEnabled;
	-(void) OnMediaFailed:(RoomMediaFailReason)reason;
	-(void) OnMediaDisabled:(RoomMediaDisableReason)reason;
@end
@protocol IGetHistory

	-(void) OnGetHistoryResults:(NSMutableArray*)records HistorySize:(long long)historySize Result:(RoomSearchResult)result;
@end
@protocol IGetRoomProperties

	-(void) OnGetRoomPropertiesResult:(RoomGetPropertiesResult)result RoomProperties:(RoomProperties*)roomProperties;
@end
@protocol IMessageSearch

	-(void) OnMessageSearchResults:(const char*)searchText Records:(NSMutableArray*)records Result:(RoomSearchResult)result;
@end
@protocol IRegisterParticipantEventListener

	-(void) OnParticipantJoined:(Participant*)participant;
	-(void) OnParticipantLeft:(Participant*)participant;
	-(void) OnDynamicParticipantChanged:(NSMutableArray*)dynamicSelectedParticipants DynamicSelectedCameras:(NSMutableArray*)dynamicSelectedCameras;
	-(void) OnLoudestParticipantChanged:(Participant*)participant IsAudioOnly:(BOOL)isAudioOnly;
@end
@protocol IRegisterRecoderInCallEventListener

	-(void) RecorderInCall:(BOOL)recorderInCall;
@end
@protocol IRegisterResourceManagerEventListener

	-(void) OnAvailableResourcesChanged:(unsigned int)cpuEncode CpuDecode:(unsigned int)cpuDecode BandwidthSend:(unsigned int)bandwidthSend BandwidthReceive:(unsigned int)bandwidthReceive;
	-(void) OnMaxRemoteSourcesChanged:(unsigned int)maxRemoteSources;
@end
@protocol IRegisterRoomPropertiesEventListener

	-(void) OnRoomPropertiesChanged:(RoomProperties*)roomProperties;
@end
@protocol ISetFavorite

	-(void) OnSetFavoriteResult:(BOOL)isFavorite Result:(RoomSetFavoriteResult)result;
@end
@protocol ISetRoomProperties

	-(void) OnSetRoomPropertiesResult:(RoomSetPropertiesResult)result;
@end
@interface Room : NSObject
{
	void* objPtr;
	@public
	NSMutableString* id;
	RoomType type;
	id<IAcceptIncoming> acceptIncoming;
	id<IAcquireMediaRoute> acquireMediaRoute;
	id<IDelete> delete;
	id<IEnableMedia> enableMedia;
	id<IGetHistory> getHistory;
	id<IGetRoomProperties> getRoomProperties;
	id<IMessageSearch> messageSearch;
	id<IRegisterMessageEventListener> registerMessageEventListener;
	id<IRegisterParticipantEventListener> registerParticipantEventListener;
	id<IRegisterRecoderInCallEventListener> registerRecoderInCallEventListener;
	id<IRegisterResourceManagerEventListener> registerResourceManagerEventListener;
	id<IRegisterRoomPropertiesEventListener> registerRoomPropertiesEventListener;
	id<IRegisterSubjectEventListener> registerSubjectEventListener;
	id<ISetFavorite> setFavorite;
	id<ISetRoomProperties> setRoomProperties;
}

	-(void) dealloc;
	-(BOOL) AcceptIncoming:(id<IAcceptIncoming>)acceptIncoming;
	-(BOOL) AcquireMediaRoute:(id<IAcquireMediaRoute>)acquireMediaRoute;
	-(void) AddLocalCamera:(LocalCamera*)localCamera RemoveOthers:(BOOL)removeOthers;
	-(void) AddLocalMicrophone:(LocalMicrophone*)localMicrophone RemoveOthers:(BOOL)removeOthers IsAES:(BOOL)isAES;
	-(void) AddLocalMonitor:(LocalMonitor*)localMonitor RemoveOthers:(BOOL)removeOthers;
	-(void) AddLocalRenderer:(LocalRenderer*)localRenderer RemoveOthers:(BOOL)removeOthers;
	-(void) AddLocalSpeaker:(LocalSpeaker*)localSpeaker RemoveOthers:(BOOL)removeOthers IsAES:(BOOL)isAES;
	-(void) AddLocalWindowShare:(LocalWindowShare*)localWindowShare RemoveOthers:(BOOL)removeOthers;
	-(void) Delete:(id<IDelete>)delete;
	-(BOOL) DisableMedia;
	-(BOOL) EnableMedia:(id<IEnableMedia>)enableMedia;
	-(BOOL) Enter:(id<IAcceptIncoming>)acceptIncoming;
	-(BOOL) GetHistory:(unsigned int)numMessages GetHistory:(id<IGetHistory>)getHistory;
	-(BOOL) GetHistoryById:(long long)messageId NumMessagesBefore:(unsigned int)numMessagesBefore NumMessagesAfter:(unsigned int)numMessagesAfter GetHistory:(id<IGetHistory>)getHistory;
	-(BOOL) GetHistoryByTime:(long)time NumMessagesBefore:(unsigned int)numMessagesBefore NumMessagesAfter:(unsigned int)numMessagesAfter GetHistory:(id<IGetHistory>)getHistory;
	-(NSString*) GetId;
	-(BOOL) GetRoomProperties:(id<IGetRoomProperties>)getRoomProperties;
	-(void) GetSelectedLocalCameras:(NSMutableArray*)cameras;
	-(void) GetSelectedLocalMicrophones:(NSMutableArray*)mics;
	-(void) GetSelectedLocalMonitors:(NSMutableArray*)monitors;
	-(void) GetSelectedLocalRenderers:(NSMutableArray*)renderers;
	-(void) GetSelectedLocalSpeakers:(NSMutableArray*)speakers;
	-(void) GetSelectedLocalWindowShares:(NSMutableArray*)windowShares;
	-(BOOL) GetStats:(RoomStats*)stats;
	-(RoomType) GetType;
	-(User*) GetUser;
	-(long) GetUserData;
	-(void) HideStatisticsDialog;
	-(BOOL) Invite:(NSString*)userId Message:(const char*)message;
	-(BOOL) InviteAll:(const char*)message;
	-(BOOL) InviteN:(NSMutableArray*)userIds Message:(const char*)message;
	-(BOOL) Leave;
	-(BOOL) MessageSearch:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize MessageSearch:(id<IMessageSearch>)messageSearch;
	-(BOOL) RegisterMessageEventListener:(id<IRegisterMessageEventListener>)registerMessageEventListener;
	-(BOOL) RegisterParticipantEventListener:(id<IRegisterParticipantEventListener>)registerParticipantEventListener;
	-(BOOL) RegisterRecoderInCallEventListener:(id<IRegisterRecoderInCallEventListener>)registerRecoderInCallEventListener;
	-(BOOL) RegisterResourceManagerEventListener:(id<IRegisterResourceManagerEventListener>)registerResourceManagerEventListener;
	-(BOOL) RegisterRoomPropertiesEventListener:(id<IRegisterRoomPropertiesEventListener>)registerRoomPropertiesEventListener;
	-(BOOL) RegisterSubjectEventListener:(id<IRegisterSubjectEventListener>)registerSubjectEventListener;
	-(BOOL) RejectIncoming;
	-(void) RemoveLocalCamera:(LocalCamera*)localCamera;
	-(void) RemoveLocalMicrophone:(LocalMicrophone*)localMicrophone;
	-(void) RemoveLocalMonitor:(LocalMonitor*)localMonitor;
	-(void) RemoveLocalRenderer:(LocalRenderer*)localRenderer;
	-(void) RemoveLocalSpeaker:(LocalSpeaker*)localSpeaker;
	-(void) RemoveLocalWindowShare:(LocalWindowShare*)localWindowShare;
	-(BOOL) SendMessage:(const char*)message;
	-(BOOL) SendMessageAcknowledged:(long long)messageId;
	-(BOOL) SendMessageTypingIndication:(ChatMessageTypingIndication)typingIndication;
	-(BOOL) SetDynamicGenerationPosition:(unsigned int)generation X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) SetDynamicLocalRenderer:(LocalRenderer*)renderer;
	-(void) SetFavorite:(BOOL)isFavorite SetFavorite:(id<ISetFavorite>)setFavorite;
	-(BOOL) SetMaxAudioSources:(unsigned int)count;
	-(BOOL) SetMaxVideoSources:(unsigned int)count;
	-(BOOL) SetRoomProperties:(RoomProperties*)roomProperties SetRoomProperties:(id<ISetRoomProperties>)setRoomProperties;
	-(BOOL) SetSubject:(const char*)subject;
	-(void) SetUserData:(long)userData;
	-(void) ShowStatisticsDialog;
	-(BOOL) UnregisterMessageEventListener;
	-(BOOL) UnregisterParticipantEventListener;
	-(BOOL) UnregisterRecoderInCallEventListener;
	-(BOOL) UnregisterResourceManagerEventListener;
	-(BOOL) UnregisterRoomPropertiesEventListener;
	-(BOOL) UnregisterSubjectEventListener;
	-(id) initWithObject:(void*)rPtr;
	-(void*)GetObjectPtr;
@end
@interface GenerationDiff : NSObject
{
	@public
	int newIndex;
	int oldIndex;
	Participant* participant;
}

@end
@protocol IAdvancedSearchRooms

	-(void) OnRoomSearchResults:(const char*)searchText SearchResult:(UserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo NumRecords:(size_t)numRecords;
@end
@protocol IAdvancedSearchUsers

	-(void) OnUserSearchResults:(const char*)searchText SearchResult:(UserSearchResult)searchResult Contacts:(NSMutableArray*)contacts NumRecords:(size_t)numRecords;
@end
@protocol ICreateCall

	-(void) OnCallCreated:(Call*)call Result:(UserCallCreateResult)result CreateToken:(NSString*)createToken;
@end
@protocol ICreateRoomFromId

	-(void) OnRoomCreated:(Room*)room Result:(UserRoomCreateResult)result CreateToken:(NSString*)createToken;
@end
@protocol IGetContact

	-(void) OnGetContactResult:(Contact*)contact Result:(UserGetContactResult)result;
@end
@protocol IGetFavoriteRooms

	-(void) OnFavoriteRoomResults:(UserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo;
@end
@protocol IGetRecentRooms

	-(void) OnRecentRoomResults:(UserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo;
@end
@protocol ILogin

	-(void) OnLoginComplete:(UserLoginResult)result Secure:(BOOL)secure;
	-(void) OnLoggedOut:(UserLogoutReason)reason;
	-(void) OnConnectionStatusChanged:(UserConnectionStatusChangedReason)reason;
	-(void) OnTokenReceived:(NSMutableString*)token TokenType:(UserTokenType)tokenType;
	-(void) OnWebProxyCredentialsRequest;
@end
@protocol IRegisterCallEventListener

	-(void) OnCallCreatedByInvite:(Call*)call Inviter:(Contact*)inviter;
@end
@protocol IRegisterContactEventListener

	-(void) OnUpdateSelf:(Contact*)contact;
	-(void) OnUpdateRosterContact:(Contact*)contact;
	-(void) OnRemoveRosterContact:(NSString*)uri;
@end
@protocol IRegisterLicenseEventListener

	-(void) OnLicenseReceived:(NSString*)licenseKey;
	-(void) OnGetLicenseKey:(NSMutableString*)licenseKey;
@end
@protocol IRegisterRoomEventListener

	-(void) OnRoomCreatedByInvite:(Room*)room Inviter:(Contact*)inviter Message:(const char*)message;
@end
@interface User : NSObject
{
	void* objPtr;
	@public
	id<IAdvancedSearchRooms> advancedSearchRooms;
	id<IAdvancedSearchUsers> advancedSearchUsers;
	id<ICreateCall> createCall;
	id<ICreateRoomFromId> createRoomFromId;
	id<IGetContact> getContact;
	id<IGetFavoriteRooms> getFavoriteRooms;
	id<IGetRecentRooms> getRecentRooms;
	id<ILogin> login;
	id<IRegisterCallEventListener> registerCallEventListener;
	id<IRegisterContactEventListener> registerContactEventListener;
	id<IRegisterLicenseEventListener> registerLicenseEventListener;
	id<IRegisterRoomEventListener> registerRoomEventListener;
}

	-(id) init:(Endpoint*)endpoint;
	-(void) dealloc;
	-(BOOL) AddRosterContact:(NSString*)userId;
	-(BOOL) AdvancedSearchRooms:(NSMutableArray*)fieldSet FieldRelations:(NSMutableArray*)fieldRelations FieldValues:(NSMutableArray*)fieldValues SearchToken:(const char*)searchToken Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) AdvancedSearchUsers:(NSMutableArray*)fieldSet FieldValues:(NSMutableArray*)fieldValues SearchToken:(const char*)searchToken Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchUsers:(id<IAdvancedSearchUsers>)advancedSearchUsers;
	-(BOOL) AllowSubscriber:(NSString*)userId;
	-(BOOL) BlockSubscriber:(NSString*)userId;
	-(BOOL) CreateCall:(NSString*)userId CreateToken:(NSMutableString*)createToken CreateCall:(id<ICreateCall>)createCall;
	-(BOOL) CreateRoomFromId:(const char*)id CreateToken:(NSMutableString*)createToken CreateRoomFromId:(id<ICreateRoomFromId>)createRoomFromId;
	-(BOOL) CreateRoomWithId:(const char*)id CreateToken:(const char*)createToken CreateRoomFromId:(id<ICreateRoomFromId>)createRoomFromId;
	-(BOOL) CreateTopicRoom:(const char*)name Description:(const char*)description CreateToken:(NSMutableString*)createToken CreateRoomFromId:(id<ICreateRoomFromId>)createRoomFromId;
	-(BOOL) GetContact:(NSString*)userId GetContact:(id<IGetContact>)getContact;
	-(BOOL) GetConversationRoom:(NSMutableArray*)userIds CreateToken:(NSMutableString*)createToken CreateRoomFromId:(id<ICreateRoomFromId>)createRoomFromId;
	-(BOOL) GetCurrentRoster:(NSMutableArray*)roster;
	-(Endpoint*) GetEndpoint;
	-(BOOL) GetFavoriteRooms:(unsigned int)index PageSize:(unsigned int)pageSize GetFavoriteRooms:(id<IGetFavoriteRooms>)getFavoriteRooms;
	-(NSString*) GetId;
	-(BOOL) GetRecentRooms:(unsigned int)index PageSize:(unsigned int)pageSize GetRecentRooms:(id<IGetRecentRooms>)getRecentRooms;
	-(BOOL) GetStats:(UserStats*)stats;
	-(BOOL) Login:(const char*)username Password:(const char*)password Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType Login:(id<ILogin>)login;
	-(BOOL) LoginAsGuest:(const char*)displayName Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType Login:(id<ILogin>)login;
	-(BOOL) LoginWithAccessToken:(const char*)accessToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType Login:(id<ILogin>)login;
	-(BOOL) LoginWithRefreshToken:(const char*)refreshToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType Login:(id<ILogin>)login;
	-(BOOL) LoginWithTenantToken:(const char*)provisionToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType Login:(id<ILogin>)login;
	-(BOOL) Logout;
	-(BOOL) RegisterCallEventListener:(id<IRegisterCallEventListener>)registerCallEventListener;
	-(BOOL) RegisterContactEventListener:(id<IRegisterContactEventListener>)registerContactEventListener;
	-(BOOL) RegisterLicenseEventListener:(id<IRegisterLicenseEventListener>)registerLicenseEventListener;
	-(BOOL) RegisterRoomEventListener:(id<IRegisterRoomEventListener>)registerRoomEventListener;
	-(BOOL) RemoveRosterContact:(NSString*)userId;
	-(BOOL) SearchConversationRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchRoomsWithName:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchRoomsWithOwner:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchRoomsWithSubject:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchTopicRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchRooms:(id<IAdvancedSearchRooms>)advancedSearchRooms;
	-(BOOL) SearchUsers:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize AdvancedSearchUsers:(id<IAdvancedSearchUsers>)advancedSearchUsers;
	-(void) SetCA:(const char*)ca CaFilePath:(const char*)caFilePath CaDir:(const char*)caDir;
	-(void) SetDisplayName:(const char*)displayName;
	-(void) SetWebProxyAddressCredentials:(const char*)proxyAddress Username:(const char*)username Password:(const char*)password;
	-(BOOL) UnregisterCallEventListener;
	-(BOOL) UnregisterContactEventListener;
	-(BOOL) UnregisterLicenseEventListener;
	-(BOOL) UnregisterRoomEventListener;
	-(BOOL) UpdatePresence:(ContactPresenceState)state Status:(const char*)status;
	-(id) initWithObject:(void*)rPtr;
	-(void*)GetObjectPtr;
@end
